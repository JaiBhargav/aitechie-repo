AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create API Gateway with all resources, methods, and CORS enabled.'

Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AItechie-API
      Description: API Gateway for AItechie Q&A platform

  RootMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  UserSignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: user-signup
      RestApiId: !Ref ApiGateway

  UserLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: user-login
      RestApiId: !Ref ApiGateway

  FetchAnswersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: fetch-answers
      RestApiId: !Ref ApiGateway

  FetchQuestionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: fetch-questions
      RestApiId: !Ref ApiGateway

  SubmitAnswerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: submit-answer
      RestApiId: !Ref ApiGateway

  SubmitQuestionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: submit-question
      RestApiId: !Ref ApiGateway

  UserSignupMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserSignupResource
      HttpMethod: POST
      AuthorizationType: NONE

  UserLoginMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserLoginResource
      HttpMethod: POST
      AuthorizationType: NONE

  FetchAnswersMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref FetchAnswersResource
      HttpMethod: GET
      AuthorizationType: NONE

  FetchQuestionsMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref FetchQuestionsResource
      HttpMethod: GET
      AuthorizationType: NONE

  SubmitAnswerMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SubmitAnswerResource
      HttpMethod: POST
      AuthorizationType: NONE

  SubmitQuestionMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SubmitQuestionResource
      HttpMethod: POST
      AuthorizationType: NONE

Outputs:
  ApiGatewayInvokeURL:
    Description: "Invoke URL of the API Gateway"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
